breakpoint;

[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE+1] * 16) + 9] = -1;

[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE+1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1] * 16) + 11] * 512 - 1;

backup;

multipush(EIP);

if( (EC != 0) || ([PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13] == (PTLR*512-1)) ) then
	if(EC == 1) then
		print "IllegalIns";
		print EIP;
	endif;
	if(EC == 2) then
		print "IllegalMem";
	endif;
	if(EC == 3) then
		print "ArithmeticEp";
	endif;
	if([PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13] == (PTLR*512-1)) then
		print "StackOver";
	endif;
	

	//invoke exit process function

	R1 = EXIT_PROCESS;
	R2 = [SYSTEM_STATUS_TABLE+1];

	call PROCESS_MANAGER;
    call SCHEDULER;

endif;


// exception due to PAGE FAULT in code page

if( EPN >= 4 && EPN <= 7  ) then
	//code block required = [DISK_MAP_TABLE+EPN]
	
	multipush(R0, R1, R2, R3, R4, R5);
	R1 = GET_CODE_PAGE;
	R2 = [DISK_MAP_TABLE+ 10*[SYSTEM_STATUS_TABLE+1] +EPN];
	breakpoint;
	call MEMORY_MANAGER;
	
	[PTBR + EPN*2] = R0;
	[PTBR + EPN*2+1] = "1100";
	breakpoint;


	multipop(R0, R1, R2, R3, R4, R5);

endif;

// exception due to PAGE FAULT in heap page

if( EPN >= 2 && EPN <= 3 ) then

	//allocate 2 mem pages for heap
	multipush(R0, R1, R2, R3, R4, R5, R6);

	R1 = GET_FREE_PAGE;
	call MEMORY_MANAGER;

    [PTBR + 4] = R0;
	[PTBR + 5] = "1110";

	multipop(R0, R1, R2, R3, R4, R5, R6);


	multipush(R0, R1, R2, R3, R4, R5, R6);

	R1 = GET_FREE_PAGE;
	call MEMORY_MANAGER;

    [PTBR + 6] = R0;
	[PTBR + 7] = "1110";

	multipop(R0, R1, R2, R3, R4, R5, R6);
endif;

multipop(EIP);
restore;

[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE+1] * 16) + 9] = 0;
SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];
SP = SP + 1;

[[PTBR + (SP/512)*2]*512 + (SP%512)] = EIP;

breakpoint;
ireturn;
