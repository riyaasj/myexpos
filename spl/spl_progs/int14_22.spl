//save user stack value and switch to kernel stack
alias pt R6;
pt = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16;
alias userSP R2;
userSP = SP;
[pt + 13] = SP;
SP =  [pt + 11] * 512 - 1;


//extract system call number 
alias syscallnum R5;
syscallnum = [[PTBR + 2 * ((userSP - 5) / 512)] * 512 + ((userSP - 5) % 512)];


if(syscallnum == 19) then

    //MODE flag
    [pt + 9] = 19;


    //if sem_desc not valid/ resource identifier field not valid
    alias sem_des R1;
    sem_des = [[PTBR + 2 * ((userSP - 4) / 512)] * 512 + ((userSP - 4) % 512)];
    if(sem_des > 7 || sem_des < 0 || [[pt + 11] * 512 + RESOURCE_TABLE_OFFSET + 2 * sem_des] != 1)then
        [pt + 9] = 0;
        [[PTBR + ((userSP - 1) / 512) * 2] * 512 + (userSP - 1) % 512] = -1;
        SP = userSP;
        ireturn;
    endif;

    alias sem_index R2;
    sem_index = [[pt + 11] * 512 + RESOURCE_TABLE_OFFSET + 2 * sem_des + 1];


    //while the semaphore is locked by some other process
    while([SEMAPHORE_TABLE + 4 * sem_index] != -1 && ([SEMAPHORE_TABLE + sem_index * 4] != [SYSTEM_STATUS_TABLE + 1])) do
            [pt + 4] = WAIT_SEMAPHORE;
            [pt + 5] = sem_index;


            //invoke scheduler
            multipush(R1, R2, R5, R6);
            call MOD_5;
            multipop(R1, R2, R5, R6);
    endwhile;

    //set locking pid
    [SEMAPHORE_TABLE + 4 * sem_index] = [SYSTEM_STATUS_TABLE + 1];

    [pt + 9] = 0;
    [[PTBR + ((userSP - 1) / 512) * 2] * 512 + (userSP - 1) % 512] = 0;
    SP = userSP;
    ireturn;

endif;


if(syscallnum == 20) then
    [pt + 9] = 20;
    alias sem_des R1;
    sem_des = [[PTBR + 2 * ((userSP - 4) / 512)] * 512 + ((userSP - 4) % 512)];

    //check if sem_des is valid
    if(sem_des > 7 || sem_des < 0 || [[pt + 11] * 512 + RESOURCE_TABLE_OFFSET + 2 * sem_des] != 1)then
        [pt + 9] = 0;
        [[PTBR + ((userSP - 1) / 512) * 2] * 512 + (userSP - 1) % 512] = -1;
        SP = userSP;
        ireturn;
    endif;

    alias sem_index R2;
    sem_index = [[pt + 11] * 512 + RESOURCE_TABLE_OFFSET + 2 * sem_des + 1];

    if([SEMAPHORE_TABLE + 4 * sem_index] != -1) then

        //if semaphore is locked by some other process return -2
        if([SEMAPHORE_TABLE + 4 * sem_index] != [SYSTEM_STATUS_TABLE + 1]) then
            [pt + 9] = 0;
            [[PTBR + ((userSP - 1) / 512) * 2] * 512 + (userSP - 1) % 512] = -2;
            SP = userSP;
            ireturn;  
        endif;

        //release lock
        [SEMAPHORE_TABLE + 4 * sem_index] = -1;
        alias i R4;
        i = 0;


        //set states
        while(i < 16) do
            if([PROCESS_TABLE + i * 16 + 4] == WAIT_SEMAPHORE && [PROCESS_TABLE + i * 16 + 5] == sem_index) then
                
                [PROCESS_TABLE + i * 16 + 4] = READY;
                [PROCESS_TABLE + i * 16 + 5] = -1;
            endif;
            i = i + 1;
        endwhile;
    endif;
    [[PTBR + ((userSP - 1) / 512) * 2] * 512 + (userSP - 1) % 512] = -2;
    SP = userSP;
    ireturn;
endif;






[pt + 9] = 0;
SP = userSP;
ireturn;