//System call 9 exec
//1. SP
alias userSP R0;
userSP = SP;
//USER TO KERNEL STACK
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1] * 16) +13] =userSP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1] * 16) + 11]* 512 -1;

//2. MODE FLAG IN PROCESS TABLE
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 9; 
PTBR=[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 14];

//3.  arguments
alias filename R1;
filename = [[PTBR + 2*((userSP-4)/512)]*512 + (userSP-4)%512];

//4. Search the memory copy of the inode table for the file
//If the file is not present or file is not in XEXE format 
//return to user mode with return value -1 indicating failure 
//(after setting up MODE FLAG and the user stack).
alias file_index R2;
file_index=0;
while(file_index<60) do
        if([INODE_TABLE + (file_index*16) +1]==filename) then
            if([INODE_TABLE + (file_index*16)]==3) then
                break;
            endif;
        endif;
        file_index=file_index+1;
endwhile;  
if(file_index==60) then
    [[PTBR+2*((userSP-1)/512)]*512 + ((userSP-1)%512)] = -1;
    [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0; 
    SP=userSP;
    ireturn;
endif;
//5. If the file is present, save the inode index of the file into a register for future use. 

//6. Call the Exit Process function in process 
//manager module to deallocate the resources 
//and pages of the current process.
multipush(R0,R1,R2,PTBR,PTLR);
R1=3;
R2=[SYSTEM_STATUS_TABLE+1];
call MOD_1;   //Process Manager Module 
multipop(R0,R1,R2,PTBR,PTLR);

//7. Get the user area page number from the process table of the current process. This page has been deallocated by the Exit Process function. Reclaim the same page by incrementing the memory free list entry of user area page and decrementing the MEM_FREE_COUNT field in the system status table. (same user area page is reclaimed - why?)
alias user_area_pg R3;
user_area_pg =  [PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16) + 11];
if([MEMORY_FREE_LIST + user_area_pg]==0)  then
    [SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]-1;
endif;
[MEMORY_FREE_LIST + user_area_pg]=[MEMORY_FREE_LIST + user_area_pg]+1;

//8. Set the SP to the start of the user area page to intialize the kernel stack of the new process.
SP=user_area_pg*512 -1;

//PER PROCEESS RESOURCE TABLE
R4=(user_area_pg+1)*512-16;    //496=511-16+1
while(R4<(user_area_pg+1)*512) do
    [R4]=-1;
    R4=R4+1;
endwhile;

//9. New process uses the PID of the terminated process. Update the STATE field to RUNNING and store inode index obtained above in the inode index field in the process table.
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4]=RUNNING;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+7]=file_index;

//10. Allocate new pages and set the page table entries for the new process.
// i)   Set the library page entries in the page table. (must be set to read only-why? Note that library page need not be allocated.)
//LIB
[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";
// ii) Invoke the Get Free Page function to allocate 2 stack and 2 heap pages. Also validate the corresponding entries in page table.
multipush(R0,R1,R2,R3,PTBR,PTLR);
//HEAP
[PTBR+4]=-1;
[PTBR+5]="0000";

[PTBR+6]=-1;
[PTBR+7]="0000";

//STACK
multipush(PTBR);
R1=1;
call MOD_2;//get free page

multipop(PTBR);
[PTBR+16] = R0;
[PTBR+17] = "0110";
multipush(PTBR);
R1=1;
call MOD_2;//get free page

multipop(PTBR);
[PTBR+18] = R0;
[PTBR+19] = "0110";

multipop(R0,R1,R2,R3,PTBR,PTLR);


//code
[PTBR+8] = -1;
[PTBR+9] = "0000";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000"; 
[PTBR+14] = -1;
[PTBR+15] = "0000"; 

multipush(R0,R1,R2,R3,R4,PTBR,PTLR);
R1=5;
R2=[INODE_TABLE + file_index*16 + 8]; //1st code block number from the inode table using file_index
R3=[SYSTEM_STATUS_TABLE+1];
call MOD_2; //Get Code Pg fn in MEMORY MANAGER MODULE
[PTBR+8] = R0;
[PTBR+9] = "0100";
multipop(R0,R1,R2,R3,R4,PTBR,PTLR);

//disk map table of process                 = //inode table entry
/// use process id in system status table     // use file_index in disk
[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+0]=-1;
[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+1]=-1;
[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+2]=-1;
[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+3]=-1;
[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+4]=[INODE_TABLE + file_index*16 + 8];
[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+5]=[INODE_TABLE + file_index*16 + 9];
[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+6]=[INODE_TABLE + file_index*16 + 10];
[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+7]=[INODE_TABLE + file_index*16 + 11];
[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+8]=-1;
[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+9]=-1;



//12. Store the entry point IP (present in the header of first code page) value on top of the user stack.
SP=8*512;
[[PTBR+16]*512]=[[PTBR+8]*512+1];
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1] * 16) +13] =SP;
//just  changed the uptr.. kptr is 0... did not change anywhere so it's fine

//13. Change SP to user stack, change the MODE FLAG back to user mode and return to user mode.
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16)+9] = 0;
BP=SP-1;

ireturn;