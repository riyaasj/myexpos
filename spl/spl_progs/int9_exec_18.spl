//Save user stack value for later use, set up the kernel stack
alias userSP R0;
userSP = SP;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1] * 16) +13] =userSP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1] * 16) + 11]* 512 -1;



//Set the MODE FLAG
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 9; 


//Get the argument (name of the file) from user stack
alias filename R1;
filename = [[PTBR + 2 * ((userSP - 4) / 512)] * 512 + (userSP - 4) % 512];



//Search the memory copy of the inode table for the file
alias file_index R2;
while(file_index<60) do
        if([59*512 + file_index*16 +1]==filename) then
            if([59*512 + file_index*16]==3) then
                break;
            endif;
        endif;
        file_index=file_index+1;
endwhile;  



//If the file is not present or file is not in XEXE format return to user mode with return value -1
if(file_index==60) then
    [[PTBR+2*((userSP-1)/512)]*512 + ((userSP-1)%512)] = -1;
    [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0; 
    SP=userSP;
    ireturn;
endif;



//Call the Exit Process function in process manager module to deallocate the resources and pages of the current process.
multipush(R0,R1,R2);
R1 = 3;
R2 = file_index;
call MOD_1;         //Process Manager
multipop(R0,R1,R2);



//Get the user area page number from the process table of the current process. This page has been deallocated by the Exit Process function. Reclaim the same page by incrementing the memory free list entry of user area page and decrementing the MEM_FREE_COUNT field in the system status table.
alias user_area_pg R3;
user_area_pg =  [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11];
if([57*512 + user_area_pg]==0)  then
    [SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]-1;
endif;
[57*512 + user_area_pg]=[57*512 + user_area_pg]+1;




//Set the SP to the start of the user area page to intialize the kernel stack of the new process.
SP = user_area_pg * 512 - 1;


//PER PROCESS TABLE
R5 = ([PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] + 1) * 512 - 16 ;
while(R5 < ([PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] + 1) * 512 ) do
	[R5] = -1;
	R5 = R5 + 1;
endwhile;



//New process uses the PID of the terminated process. Update the STATE field to RUNNING and store inode index obtained above in the inode index field in the process table.
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 4] = RUNNING;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 7] = file_index;




//Allocate new pages and set the page table entries for the new process.

//library
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";


//Invoke the Get Free Page function to allocate 2 stack and 2 heap pages. Also validate the corresponding entries in page table.
multipush(R0,R1,R2,R3);
//heap
R1 = 1;
call MOD_2;          //get free page
[PTBR + 4] = R0;
[PTBR + 5] = "0110";

R1 = 1;
call MOD_2;          //get free page
[PTBR + 6] = R0;
[PTBR + 7] = "0110";

//stack
R1 = 1;
call MOD_2;          //get free page
[PTBR + 16] = R0;
[PTBR + 17] = "0110";

R1 = 1;
call MOD_2;           //get free page
[PTBR + 18] = R0;
[PTBR + 19] = "0110";

multipop(R0,R1,R2,R3);





//Find out the number of blocks occupied by the file from inode table. Allocate same number of code pages by invoking the Get Free Page function and update the page table entries.
alias size R4;
size = ([INODE_TABLE + file_index * 16 + 2] + 511) / 512;
//code
[PTBR + 8] = -1;
[PTBR + 9] = "0000";
[PTBR + 10] = -1;
[PTBR + 11] = "0000";
[PTBR + 12] = -1;
[PTBR + 13] = "0000"; 
[PTBR + 14] = -1;
[PTBR + 15] = "0000"; 
R0 = 8;
while(size > 0) do
    multipush(R0, R1, R2, R3, R4);
    R1 = 1;
    call MOD_2;                 //get free page
    R5 = R0;
    multipop(R0, R1, R2, R3, R4);
    [PTBR + R0] = R5;
    [PTBR + R0 + 1] = "0100";
    R0 = R0 + 2;
    size = size - 1;
endwhile;



//Load the code blocks from the disk to the memory pages using loadi statement
R5 = 8;
R6 = 8;
while(R5 < 16 && [PTBR + R5] != -1)  do
	multipush(R0, R1, R2, R3, R4, R5, R6);
	R1 = 2;
	R2 = [PTBR + R5];
	R3 = [INODE_TABLE + file_index * 16 + R6];
	call DEVICE_MANAGER;
	multipop(R0, R1, R2, R3, R4, R5, R6);
    R5 = R5 + 2;
    R6 = R6 + 1;
endwhile;







//Store the entry point IP value on top of the user stack.
SP = 8 * 512;
[[PTBR + 16] * 512] = [[PTBR + 8] * 512 + 1];
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;


//Change SP to user stack, change the MODE FLAG back to user mode and return to user mode.
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;


ireturn;
