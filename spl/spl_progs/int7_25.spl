alias pt R1;
pt = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16;


//mode flag
[pt + 9] = 5;


//save user stack value and switch to kernel stack
alias userSP R2;
[pt + 13] = SP;
SP = [pt + 11] * 512 - 1;


//arguments
alias fileDesc R3;
fileDesc = [[PTBR + 2 * ((userSP - 4) / 512)] * 512 + (userSP - 4) % 512];
alias word R4;
word = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];


//return address
alias returnAdd R5;
returnAdd = [PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512;

if(fileDesc == -2) then
    multipush(R1, R2, R3, R4, R5);
    R1 = 3;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = word;
    call DEVICE_MANAGER;
    multipop(R1, R2, R3, R4, R5);

    [returnAdd] = 0;
    SP = userSP;
    [pt + 9] = 0;
    ireturn;

else
    alias pprt R6;
    pprt = [pt + 11] * 512 + RESOURCE_TABLE_OFFSET;

    if(fileDesc > 7 || fileDesc < 0 || [pprt + fileDesc * 2] != FILE) then
        [returnAdd] = -1;
        SP = userSP;
        [pt + 9] = 0;
        ireturn;
    endif;

    alias oft R7;
    oft = [pprt + fileDesc * 2 + 1];

    alias inodeIndex R8;
    inodeIndex = [OPEN_FILE_TABLE + oft * 4];

    if([INODE_TABLE + inodeIndex * 16 + 4] == EXCLUSIVE && [INODE_TABLE + inodeIndex * 16 + 3] != [pt + 3] && [pt + 3] != 1) then
        [returnAdd] = -3;
        SP = userSP;
        [pt + 9] = 0;
        ireturn;
    endif;

    multipush(R1, R2, R3, R4, R5, R6, R7, R8);
    R1 = 4;
    R2 = inodeIndex;
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call RESOURCE_MANAGER;
    multipop(R1, R2, R3, R4, R5, R6, R7, R8);

    if(R0 == -1) then
        [returnAdd] = -1;
        SP = userSP;
        [pt + 9] = 0;
        ireturn;
    endif;

    alias lseek R9;
    lseek = OPEN_FILE_TABLE + oft * 4 + 2;

    if([lseek] == MAX_FILE_SIZE) then
        multipush(R1, R2, R3, R4, R5, R6, R7, R8, R9);
        R1 = 5;
        R2 = inodeIndex;
        R3 = [SYSTEM_STATUS_TABLE + 1];
        call RESOURCE_MANAGER;
        multipop(R1, R2, R3, R4, R5, R6, R7, R8, R9);

        [returnAdd] = -2;
        SP = userSP;
        [pt + 9] = 0;
        ireturn;
    endif;

    if([lseek] % 512 == 0 && [lseek] == [INODE_TABLE + inodeIndex * 16 + 2]) then
        multipush(R1, R2, R3, R4, R5, R6, R7, R8, R9);
        R1 = 3;
        call MEMORY_MANAGER;
        multipop(R1, R2, R3, R4, R5, R6, R7, R8, R9);

        if(R0 == -1) then
            multipush(R1, R2, R3, R4, R5, R6, R7, R8, R9);
            R1 = 5;
            R2 = inodeIndex;
            R3 = [SYSTEM_STATUS_TABLE + 1];
            call RESOURCE_MANAGER;
            multipop(R1, R2, R3, R4, R5, R6, R7, R8, R9);

            [returnAdd] = -2;
            SP = userSP;
            [pt + 9] = 0;
            ireturn;
        endif;
        [INODE_TABLE + inodeIndex * 16 + 8 + ([lseek] / 512)] = R0;

    endif;

    alias blockIndex R10;
    blockIndex = [lseek] / 512;

    alias diskBlockNum R11;
    diskBlockNum = [INODE_TABLE + inodeIndex * 16 + 8 + blockIndex];

    alias offset R12;
    offset = [lseek] % 512;

    multipush(R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11);
    R1 = 1;
    R2 = diskBlockNum;
    R3 = offset;
    R4 = word;
    call FILE_MANAGER;
    multipop(R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11);

    if([lseek] == [INODE_TABLE + inodeIndex * 16 + 2]) then
        [INODE_TABLE + inodeIndex * 16  + 2] = [INODE_TABLE + inodeIndex * 16 + 2] + 1;
        [ROOT_FILE + inodeIndex * 8 + 1] = [ROOT_FILE + inodeIndex * 8 + 1] + 1;
    endif;

    [lseek] = [lseek] + 1;

    multipush(R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11);
    R1 = 5;
    R2 = inodeIndex;
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call RESOURCE_MANAGER;
    multipop(R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11);

    [returnAdd] = 0;
    SP = userSP;
    [pt + 9] = 0;
    ireturn;
endif;


