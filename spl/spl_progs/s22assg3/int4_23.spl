[SYSTEM_STATUS_TABLE + 27] = [SYSTEM_STATUS_TABLE + 27] + 1;
//save user stack value and switch to kernel stack
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;
alias userSP R0;
userSP = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 - 1;


alias sysCallNo R1;
sysCallNo = [[PTBR + 2 * (userSP - 5) / 512] * 512 + (userSP - 5) % 512];


alias returnAddress R10;
returnAddress = [PTBR + 2 * (userSP - 1) / 512] * 512 + (userSP - 1) % 512;


//set MODE flag
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = sysCallNo;


alias fileName R2;
fileName = [[PTBR + 2 * (userSP - 4) / 512] * 512 + (userSP - 4) % 512];


//check if file is present in the system
alias i R3;
i = 0;
alias fileFound R4;
fileFound = 0;
while (i < MAX_FILE_NUM) do
    if ([INODE_TABLE + i * 16 + 1] == fileName) then
        fileFound = 1;
        break;
    endif;
    i = i + 1;
endwhile;


//CREATE
if (sysCallNo == 1) then

    //if file already exists, return 0
    if (fileFound == 1) then
        [returnAddress] = 0;
        SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];
        [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
        ireturn;
    endif;



    //find index of free entry in inode table
    i = 0;
    while (i < MAX_FILE_NUM) do
        if ([INODE_TABLE + i * 16 + 1] == -1) then
            break;
        endif;
        i = i + 1;
    endwhile;


    //if no free entry available, return -1
    if (i == MAX_FILE_NUM) then
        [returnAddress] = -1;


    else
        
        [INODE_TABLE + i * 16 + 0] = DATA;                      //file type
        [INODE_TABLE + i * 16 + 1] = fileName;                  //file name
        [INODE_TABLE + i * 16 + 2] = 0;                         //file size
        [INODE_TABLE + i * 16 + 3] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 3];  //userid
        [INODE_TABLE + i * 16 + 4] = [[PTBR + 2 * (userSP - 3) / 512] * 512 + (userSP - 3) % 512];   //permission

        [ROOT_FILE + i * 8 + 0] = fileName;                      //file Name
        [ROOT_FILE + i * 8 + 1] = 0;                             //file size
        [ROOT_FILE + i * 8 + 2] = DATA;                          //file type
        [ROOT_FILE + i * 8 + 3] = [USER_TABLE + ([PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 3]) * 2];     //username
        [ROOT_FILE + i * 8 + 4] = [[PTBR + 2 * (userSP - 3) / 512] * 512 + (userSP - 3) % 512]; //permission

        [PROCESS_TABLE + i * 16 + 9] = 0;
        [returnAddress] = 0;
    endif;
endif;


//DELETE
if (sysCallNo == 4) then 

    //if file not present in inode table, return 0
    if (fileFound == 0) then
        [returnAddress] = 0;
        SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];
        [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
        ireturn;
    endif;


    alias inodeEntry R11;
    inodeEntry = INODE_TABLE + i * 16;


    //if file is not a DATA file, return -1
    if ([inodeEntry + 0] != DATA) then 
        [returnAddress] = -1;


    else

        //if permission is set to exclusive, only the root/ owner of the file can delete it
        if ([inodeEntry + 4] == EXCLUSIVE && [SYSTEM_STATUS_TABLE + 0] != 1 && [inodeEntry + 3] != [PROCESS_TABLE + i * 16 + 3]) then
           [returnAddress] = -1;
        
        
        else

            //acquire lock on file by invoking aqcuire inode
            multipush(R0, R1, R2, R3, R4, R11);
            R1 = 4;
            R2 = i;
            R3 = [SYSTEM_STATUS_TABLE + 1];
            call RESOURCE_MANAGER;
            multipop(R0, R1, R2, R3, R4, R11);


            //if file is open, it cannot be deleted
            if ([FILE_STATUS_TABLE + i * 4 + 1] != -1) then 

                //release lock and return -2
                multipush(R0, R1, R2, R3, R4, R11);
                R1 = 5;
                R2 = i;
                R3 = [SYSTEM_STATUS_TABLE + 1];
                call RESOURCE_MANAGER;
                multipop(R0, R1, R2, R3, R4, R11);
                [returnAddress] = -2;
            
            
            else
                //for each disk block
                alias blockNum R5;
                blockNum = inodeEntry + 8;
                alias limit R6;
                limit = blockNum + 4;
                while (blockNum < limit) do
                    if ([blockNum] == -1) then
                        break;
                    endif;

                    //if the block is loaded into buffer, and dirty bit is set, reset dirty bit
                    alias bufferIndex R7;
                    bufferIndex = [blockNum] % MAX_BUFFER;
                    if ([BUFFER_TABLE + bufferIndex * 4 + 0] == [blockNum] && [BUFFER_TABLE + bufferIndex * 4 + 1] == 1) then
                        [BUFFER_TABLE + bufferIndex * 4 + 1] = 0;
                    endif;


                    //release block
                    multipush(R0, R1, R2, R3, R4, R5, R6, R7, R11);
                    R1 = 4;
                    R2 = [blockNum];
                    R3 = [SYSTEM_STATUS_TABLE + 1];
                    call MEMORY_MANAGER;
                    multipop(R0, R1, R2, R3, R4, R5, R6, R7, R11);
                    blockNum = blockNum + 1;
                endwhile;

                //invalidate inode table entry
                alias i R8;
                i = inodeEntry;
                limit = i + 16;
                while (i < limit) do
                    [i] = -1;
                    i = i + 1;
                endwhile;

                //invalidate root table entry
                i = ROOT_FILE + 8 * i;
                limit = i + 8;
                while (i < limit) do
                    [i] = -1;
                    i = i + 1;
                endwhile;

                //release lock on file by invoking release inode
                multipush(R10);
                R1 = 5;
                R2 = i;
                R3 = [SYSTEM_STATUS_TABLE + 1];
                call RESOURCE_MANAGER;
                multipop(R10);



                [returnAddress] = 0;
            endif;
        endif;
    endif;
endif;

SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];
ireturn;