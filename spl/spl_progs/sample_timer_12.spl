breakpoint;
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE+1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1] * 16) + 11] * 512 - 1;

backup;               //backup all reg BP, R0-R19 into memory locations starting from address pointed to by SP

alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE + 1];


//save values of current process to process table
alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16;
[process_table_entry + 12] = SP % 512;   //KPTR
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;
[process_table_entry + 4] = READY;



alias newPID R2;
if(currentPID == 0) then
	newPID = 1;
else
	newPID = 0;
endif;


//restore the values of new process
alias new_process_table R3;
new_process_table = PROCESS_TABLE + (newPID * 16);
SP =  [new_process_table + 11] * 512 + [new_process_table + 12] ;
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];

[SYSTEM_STATUS_TABLE + 1] = newPID;


//process which is in created state won't have anything to restore
if([new_process_table + 4] == CREATED) then 
	[new_process_table + 4] = RUNNING;
	SP = [new_process_table + 13];
	ireturn;
endif;

[new_process_table + 4] = RUNNING;
restore; //(SP will also be set here)

SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13]; //switch to user stack
breakpoint;

ireturn;