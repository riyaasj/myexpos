//PROCESS MANAGER MODULE
//1. According to the function number value present in R1, implement different functions in module 1.
alias fnno R1;
alias PID R2;

//2.  If the function number corresponds to Free User Area Page, follow steps below
//i)  Obtain the user area page number from the process table entry corresponding to the PID given as an argument.
//ii)  Free the user area page by invoking the Release Page function.
//iii) Return to the caller.

//Free User Area page
if(fnno==2) then
    multipush(R1,R2);
    R3=[PROCESS_TABLE+PID*16+11];
    R1=2;
    R2=R3;
    call MOD_2; //Memory manager
    //calls release page
    multipop(R1,R2);
    return;
endif;

//3. If the function number corresponds to Exit Process, follow steps below
// i) Extract PID of the invoking process from the corresponding register.  
//Exit Process
if(fnno==3) then
    multipush(R1,R2);
    // ii)Invoke the Free Page Table function with same PID to deallocate the page table entries.
    R1=4;
    call MOD_1;
    // iii)Invoke the Free user Area Page function with the same PID to free the user area page.
    R1=2;
    call MOD_1;
    multipop(R1,R2);
    // iv) Set the state of the process as TERMINATED and return to the caller.
    [PROCESS_TABLE+16*PID+4]=TERMINATED;
    return;
endif;

//4. If the function number corresponds to Free Page Table, follow steps below

//Free  Page Table
if(fnno==4) then
    //i)    Invalidate the page table entries for the library pages by setting page number as -1 and auxiliary data as "0000" for each entry.
    [PAGE_TABLE_BASE+20*PID+0]=-1;
    [PAGE_TABLE_BASE+20*PID+1]="0000";
    [PAGE_TABLE_BASE+20*PID+2]=-1;
    [PAGE_TABLE_BASE+20*PID+3]="0000";
    //ii) For each valid entry in the page table, release the page by invoking the Release Page function and invalidate the entry.
    R3=4;
    R4=PAGE_TABLE_BASE+20*PID;
    while(R3<20) do
        if([R4+R3]!=-1) then
            R1=2;
            R2=[R4+R3];
            multipush(R1,R2,R3,R4);
       
