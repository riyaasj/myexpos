alias functionNum R1;
alias currentPID R2;


//DISK LOAD
if(functionNum == 2) then

    //acquire disk
    alias page_num R3;
    alias block_num R4; 
    multipush(R1, R2, R3, R4);
    R1 = 3;
    R2 = currentPID;
    call RESOURCE_MANAGER;
    multipop(R1, R2, R3, R4);

    //set disk status table entries
    [DISK_STATUS_TABLE + 1] = 0;
    [DISK_STATUS_TABLE + 2] = page_num;
    [DISK_STATUS_TABLE + 3] = block_num;

    //issue load statement
    load(page_num,block_num);

    //set state to WAIT_DISK
    [PROCESS_TABLE + currentPID * 16 + 4] = WAIT_DISK;

    //invoke scheduler
	multipush(R1, R2, R3, R4);
	call SCHEDULER;
	multipop(R1, R2, R3, R4);
	return;
    
endif;







if (functionNum == 3) then
    alias word R3;
    multipush(R1, R2, R3);
    functionNum = 8;

    call MOD_0;

    multipop(R1, R2, R3);

    print word;

    multipush(R1, R2, R3);

    functionNum = 9;

    call MOD_0;

    multipop(R1, R2, R3);

    return;
endif;


if (functionNum == 4) then
    alias word R3;
    multipush(R1, R2, R3);
    functionNum = 8;

    call MOD_0;

    multipop(R1, R2, R3);

    read;

    [PROCESS_TABLE + currentPID * 16 + 4] = WAIT_TERMINAL;

    multipush(R1, R2, R3);

    call MOD_5;

    multipop(R1, R2, R3);

    [[PTBR + 2 * (word / 512)] * 512 + (word % 512)] = [PROCESS_TABLE + currentPID * 16 + 8];
    
    return;
endif;
