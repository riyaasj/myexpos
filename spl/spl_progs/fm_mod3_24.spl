alias functionNumber R1;

if (functionNumber == 2) then // buffer read
    alias diskBlockNum R2;
    alias offset R3;
    alias word R4;

    alias bufferNum R5;
    bufferNum = diskBlockNum % 4;
    
    multipush(R0, R1, R2, R3, R4, R5);
    R1 = 1;
    R2 = bufferNum;
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call RESOURCE_MANAGER; // acquire buffer
    multipop(R0, R1, R2, R3, R4, R5);

    if ([BUFFER_TABLE + bufferNum * 4] != diskBlockNum) then
        if ([BUFFER_TABLE + bufferNum * 4 + 1] == 1) then
            multipush(R0, R1, R2, R3, R4, R5);

            R1 = 1;
            R2 = [SYSTEM_STATUS_TABLE + 1];
            R3 = 71 + bufferNum;
            R4 = [BUFFER_TABLE + bufferNum * 4 + 0];
            call DEVICE_MANAGER;

            multipop(R0, R1, R2, R3, R4, R5);
            [BUFFER_TABLE + bufferNum * 4 + 1] = 0;
        endif;
        multipush(R0, R1, R2, R3, R4, R5);
        R1 = 2;
        R4 = diskBlockNum;
        R2 = [SYSTEM_STATUS_TABLE + 1];
        R3 = 71 + bufferNum;
        call DEVICE_MANAGER;
        multipop(R0, R1, R2, R3, R4, R5);

        [BUFFER_TABLE + bufferNum * 4 + 0] = diskBlockNum;
    endif;
    
    
       
    [word] = [(71 + bufferNum) * 512 + offset];
    multipush(R0, R1, R2, R3, R4, R5);
    R1 = 2;
    R2 = bufferNum;
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call RESOURCE_MANAGER; // relase buffer
    multipop(R0, R1, R2, R3, R4, R5);
endif;



//open function
if (functionNumber == 3) then 
    //arguments
    alias fileName R2;
    
    
    alias i R3;
    i = 0;
    while (i < 60 && [INODE_TABLE + i * 16 + 1] != fileName) do
        i = i + 1;
    endwhile;


    //if file not present, return -1
    if (i == 60) then
        R0 = -1;
        return;
    endif;


    alias returnValue R4;
    multipush(R0, R1, R2, R3);
    R1 = 4;
    R2 = i;
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call RESOURCE_MANAGER;
    returnValue = R0;
    multipop(R0, R1, R2, R3);


    

    //if aqcuire inode fails, return -1
    if (returnValue == -1) then
        R0 = -1;
        return;
    endif;



    //if file is of EXEC type unlock file using release inode, and return -1
    if ([INODE_TABLE + i * 16 + 0] == EXEC) then
        multipush(R0, R1, R2, R3, R4);
        R1 = 5;
        R2 = i;
        R3 = [SYSTEM_STATUS_TABLE + 1];
        call RESOURCE_MANAGER;
        multipop(R0, R1, R2, R3, R4);
        R0 = -1;
        return;
    endif;


    //find a free open file table entry
    alias oft R5;
    oft = 0;
    while (oft < MAX_OPENFILE_NUM) do
        if ([OPEN_FILE_TABLE + oft * 4] == -1) then
            break;
        endif;
        oft = oft + 1;
    endwhile;


    //if no free open file table entry, return -2
    if (oft == MAX_OPENFILE_NUM) then
        R0 = -2;
        return;
    endif;
    

    //root
    if (fileName == "root") then
        [OPEN_FILE_TABLE + oft * 4] = INODE_ROOT;      //inode index

    else
        //file open count
        if ([FILE_STATUS_TABLE + i * 4 + 1] == -1) then
            [FILE_STATUS_TABLE + i * 4 + 1] = 1;
        else
            [FILE_STATUS_TABLE + i * 4 + 1] = [FILE_STATUS_TABLE + i * 4 + 1] + 1;
        endif;


        //inode index
        [OPEN_FILE_TABLE + oft * 4] = i;
    endif;


                    
    [OPEN_FILE_TABLE + oft * 4 + 1] = 1;          //open instance count
    [OPEN_FILE_TABLE + oft * 4 + 2] = 0;          //lseek


    //relase inode
    multipush(R0, R1, R2, R3, R4, R5);
    R1 = 5;
    R2 = i;
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call RESOURCE_MANAGER; 
    multipop(R0, R1, R2, R3, R4, R5);

    R0 = oft;
    return;
endif;



//close function
if (functionNumber == 4) then
    alias oft R2;

    //find the inode table entry
    alias inodeIndex R3;
    inodeIndex = [OPEN_FILE_TABLE + oft * 4];


    //decrement open instance count
    [OPEN_FILE_TABLE + oft * 4 + 1] = [OPEN_FILE_TABLE + oft * 4 + 1] - 1;


    //if open instance count becomes 0, invalidate open file table entry
    if ([OPEN_FILE_TABLE + oft * 4 + 1] == 0) then
        alias i R4;
        i = 0;
        while (i < 4) do
            [OPEN_FILE_TABLE + oft * 4 + i] = -1;
            i = i + 1;
        endwhile;



        if (inodeIndex != INODE_ROOT) then
            [FILE_STATUS_TABLE + inodeIndex * 4 + 1] = [FILE_STATUS_TABLE + inodeIndex * 4 + 1] - 1;   //file open count
            if ([FILE_STATUS_TABLE + inodeIndex * 4 + 1] == 0) then
                [FILE_STATUS_TABLE + inodeIndex * 4 + 1] = -1;
            endif;
        endif;
    endif;
endif;

return;
