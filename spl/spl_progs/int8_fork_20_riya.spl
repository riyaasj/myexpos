//set MODE flag
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 8;



//save user stack value and switch to kernel stack
alias userSP R0;
userSP = SP;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 - 1;



//invoke Get PCB
multipush(R0);
R1 = 1;
call PROCESS_MANAGER;
alias newPID R2;
newPID = R0;
multipop(R0);



//Get PCB returns -1 if no free process table is available - return -1
if (newPID == -1) then
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
    [[PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512] = -1;
    SP = userSP;
    ireturn;
endif;




//if heap pages for parent are not allocated for parent process,  do so by invoking Get Free Page and set page table entries
if ([PTBR + 4] == -1) then

    multipush(R0, R1, R2);

    R1 = 1;
    call MEMORY_MANAGER;
    [PTBR + 4] = R0;
    [PTBR + 5] = "0110";

    R1 = 1;
    call MEMORY_MANAGER;
    [PTBR + 6] = R0;
    [PTBR + 7] = "0110";

    multipop(R0, R1, R2);
endif;

alias newPTBR R3;
newPTBR = PAGE_TABLE_BASE + 20 * newPID;






//allocate two stack pages and one heap page for child process usinf Get Free Page
multipush(R0, R1, R2, R3);

//stack
R1 = 1;
call MEMORY_MANAGER;
[newPTBR + 16] = R0;
[newPTBR + 17] = "0110";


R1 = 1;
call MEMORY_MANAGER;
[newPTBR + 18] = R0;
[newPTBR + 19] = "0110";


//user area page
R1 = 1;
call MEMORY_MANAGER;
R5 = R0;
[PROCESS_TABLE + newPID * 16 + 11] = R5;

multipop(R0, R1, R2, R3);






//process table entries of child process
[PROCESS_TABLE + newPID * 16 + 3] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 3];     //userid
[PROCESS_TABLE + newPID * 16 + 6] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 6];     //swap flag
[PROCESS_TABLE + newPID * 16 + 10] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 10];   //user area swap flag status
[PROCESS_TABLE + newPID * 16 + 7] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 7];     //inode index (both run the same program)
[PROCESS_TABLE + newPID * 16 + 13] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];   //uptr

[PROCESS_TABLE + newPID * 16 + 9] = 0;                           //mode
[PROCESS_TABLE + newPID * 16 + 12] = 0;                          //kptr
[PROCESS_TABLE + newPID * 16 + 0] = 0;                           //tick
[PROCESS_TABLE + newPID * 16 + 2] = [SYSTEM_STATUS_TABLE + 1];   //ppid
[PROCESS_TABLE + newPID * 16 + 4] = CREATED;                     //state



    

//copy per process resource table from parent to child
alias i R4;
i = 512 - 16;
while (i < 512) do
    [[PROCESS_TABLE + newPID * 16 + 11] * 512 + i] = [[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 + i];
    i = i + 1;
endwhile;




//copy disk map table for child
i = 0;
while (i < 10) do
    [DISK_MAP_TABLE + 10 * newPID + i] = [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + i];
    i = i + 1;
endwhile;




//page table (copy library, heap and code)
i = 0;
while (i < 16) do
    [newPTBR + i] = [PTBR + i];
    [newPTBR + i + 1] = [PTBR + i + 1];

    //increment memory free list
    if ([newPTBR + i] != -1) then
        [MEMORY_FREE_LIST + [newPTBR + i]] = [MEMORY_FREE_LIST + [newPTBR + i]] + 1;
    endif;
    i = i + 2;
endwhile;




//copy user stack contents
alias oldStack R5;
alias newStack R6;

oldStack = [PTBR + 16];
newStack = [newPTBR + 16];
i = 0;
while (i < 512) do
    [newStack * 512 + i] = [oldStack * 512 + i];
    i = i + 1;
endwhile;

oldStack = [PTBR + 18];
newStack = [newPTBR + 18];
i = 0;
while (i < 512) do
    [newStack * 512 + i] = [oldStack * 512 + i];
    i = i + 1;
endwhile;




//store the value of BP on top of kernel stack
[[PROCESS_TABLE + newPID * 16 + 11] * 512] = BP;



//mode flag
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;






//return value
[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512] = newPID;
[[newPTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512] = 0;

SP = userSP;
ireturn;

