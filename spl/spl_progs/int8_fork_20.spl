//set the MODE FLAG to system call number
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 8;


//switch to kernel stack
alias userSP R2;
userSP = SP;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 - 1;


//invoke Get PCB entry
multipush(R2);
R1 = GET_PCB_ENTRY;
call PROCESS_MANAGER;
alias child_pid R3;
child_pid = R0;
multipop(R2);

if(child_pid == -1) then
    //store -1 as the return value in the stack
    [[(PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1] * 20 + 2 * ((userSP - 1) / 512))] * 512 + ((userSP - 1) % 512)] = -1;
    
    //reset the MODE FLAG (to 0)
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
    
    //switch to user stack
    SP = userSP;

    //return to the user mode
    ireturn;
endif;


//if heap pages not allocated
if([PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1] * 20 + 4] == -1) then
    
    //allocate heap pages by invoking the Get Free Page function
    multipush(R0, R1, R2, R3);
    R1 = 1;
    call MEMORY_MANAGER;
    [PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1] * 20 + 4] = R0;
    [PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1] * 20 + 5] = "1110";
    multipop(R0, R1, R2, R3);

    multipush(R0, R1, R2, R3);
    R1 = 1;
    call MEMORY_MANAGER;
    [PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1] * 20 + 6] = R0;
    [PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1] * 20 + 7] = "1110";
    multipop(R0, R1, R2, R3);
endif;


//allocate pages for child process
multipush(R0, R1, R2, R3);
R1 = 1;
call MEMORY_MANAGER;
[PAGE_TABLE_BASE + child_pid * 20 + 16] = R0;
[PAGE_TABLE_BASE + child_pid * 20 + 17] = [PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1] * 20 + 17];
multipop(R0, R1, R2, R3);


multipush(R0, R1, R2, R3);
R1 = 1;
call MEMORY_MANAGER;
[PAGE_TABLE_BASE + child_pid * 20 + 18] = R0;
[PAGE_TABLE_BASE + child_pid * 20 + 19] = [PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1] * 20 + 17];
multipop(R0, R1, R2, R3);



multipush(R0, R1, R2, R3);
R1 = 1;
call MEMORY_MANAGER;
[PROCESS_TABLE + child_pid * 16 + 11] = R0;
multipop(R0, R1, R2, R3);


///PROCESS_TABLE of child
[PROCESS_TABLE + child_pid * 16 + 0] = 0; //tick
[PROCESS_TABLE + child_pid * 16 + 2] = [SYSTEM_STATUS_TABLE+1]; //PPID
[PROCESS_TABLE + child_pid * 16 + 3] = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 3]; //userid
[PROCESS_TABLE + child_pid * 16 + 4] = CREATED;//state
[PROCESS_TABLE + child_pid * 16 + 6] = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 6]; //swap flag
[PROCESS_TABLE + child_pid * 16 + 7] = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 7]; //inode index
[PROCESS_TABLE + child_pid * 16 + 9] = 0; //mode flag
[PROCESS_TABLE + child_pid * 16 + 10] = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 10]; //user area swap status
[PROCESS_TABLE + child_pid * 16 + 12] = 0; //kptr
[PROCESS_TABLE + child_pid * 16 + 13] = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13]; //uptr


alias i R4;
i = 0;
while(i < 16) do
    [DISK_MAP_TABLE + child_pid * 16 + i] = [DISK_MAP_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + i];
    i = i + 1;
endwhile;


R4=0;
while(R4<16) do
    [PAGE_TABLE_BASE+child_pid*20 + R4]=[PAGE_TABLE_BASE+[SYSTEM_STATUS_TABLE+1]*20 + R4];
    if(R4%2==0) then
        [MEMORY_FREE_LIST+[PAGE_TABLE_BASE+child_pid*20 + R4]]=[MEMORY_FREE_LIST+[PAGE_TABLE_BASE+child_pid*20 + R4]]+1;
    endif;
    R4=R4+1;
endwhile;

////
R4 = 0;
alias cst R5;
alias pst R6;
R5=[PAGE_TABLE_BASE+child_pid*20+16]*512;
R6=[PAGE_TABLE_BASE+[SYSTEM_STATUS_TABLE+1]*20 + 16]*512;
while(R4<512) do
    [R5+R4]=[R6+R4];
    R4=R4+1;
endwhile;
R4=0;
R5=[PAGE_TABLE_BASE+child_pid*20+18]*512;
R6=[PAGE_TABLE_BASE+[SYSTEM_STATUS_TABLE+1]*20 + 18]*512;
while(R4<512) do
    [R5+R4]=[R6+R4];
    R4=R4+1;
endwhile;



[[PROCESS_TABLE + child_pid * 16 + 11] * 512] = BP;

[[(PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1] * 20 + 2 * ((userSP - 1) / 512))] * 512 + ((userSP - 1) % 512)] = child_pid;
[[(PAGE_TABLE_BASE + child_pid * 20 + 2 * ((userSP - 1) / 512))] * 512 + ((userSP - 1) % 512)] = 0;

[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
SP=userSP;


ireturn;