alias pt R1;
pt = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16;


//mode flag
[pt + 9] = 7;


//switch to kernel stack
alias userSP R2;
userSP = SP;
[pt + 13] = SP;
SP = [pt + 11] * 512 - 1;

//arguments
alias fileDesc R3;
fileDesc = [PAGE_TABLE_BASE + ((userSP - 4) / 512) * 2] + ((userSP - 4) % 512);

alias buffer R4;
buffer = [PAGE_TABLE_BASE + ((userSP - 3) / 512) * 2] + ((userSP - 3) % 512);


//return Address
alias R5 returnadd;
returnadd = [PAGE_TABLE_BASE + ((userSP - 1) / 512) * 2] + ((userSP - 1) % 512);

if(fileDesc == -1) then
	multipush(R0,R1,R2,R3,R4,R5);
	
	R1 = 4;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = buffer;
 
	call MOD_4; 
	multipop(R0,R1,R2,R3,R4,R5);

else
    alias pprt R6;
    pprt = [pt + 11] * 512 + RESOURCE_TABLE_OFFSET;
    if (fileDesc < 0 || fileDesc > 7 || [pprt + 2 * fileDesc] != FILE) then
        [returnadd] = -1;
        SP = userSP;
        [pt + 9] = 0;
        ireturn;
    endif;

    alias oft R7;
    oft = [pprt + 2 * fileDesc + 1];

    alias inodeIndex R8;
    inodeIndex = [OPEN_FILE_TABLE + 4 * oft];

    multipush(R0, R1, R2, R3, R4, R5);
    R1 = 4;
    R2 = inodeIndex;
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call RESOURCE_MANAGER;
    R9 = R0;
    multipop(R0, R1, R2, R3, R4, R5);

    if(R9 == -1) then
        [returnadd] = -1;
        SP = userSP;
        [pt + 9] = 0;
        ireturn;
    endif;

    alias lseek R9;
    lseek = OPEN_FILE_TABLE + 4 * oft + 2;

    alias wordAddress R10;
    wordAddress = [PTBR + 2 * (buffer / 512)] * 512 + buffer % 512;

    if (inodeIndex == INODE_ROOT) then
        if ([lSeek] == 480) then
            multipush(R0, R1, R2, R3, R4, R5, R6, R7, R11, R12);
            R1 = 5;
            R2 = inodeIndex;
            R3 = [SYSTEM_STATUS_TABLE + 1];
            call RESOURCE_MANAGER; // relase inode
            multipop(R0, R1, R2, R3, R4, R5, R6, R7, R11, R12);
            
            [returnadd] = -2;
            SP = userSP;
            [pt + 9] = 0;
            ireturn;
        endif;

        [wordAddress] = [ROOT_FILE + [lSeek]];
        [lSeek] = [lSeek] + 1;
    else
        if ([lSeek] == [INODE_TABLE + inodeIndex * 16 + 2]) then
            multipush(R0, R1, R2, R3, R4, R5, R6, R7, R11, R12);
            R1 = 5;
            R2 = inodeIndex;
            R3 = [SYSTEM_STATUS_TABLE + 1];
            call RESOURCE_MANAGER; // relase inode
            multipop(R0, R1, R2, R3, R4, R5, R6, R7, R11, R12);
            
            [returnadd] = -2;
            SP = userSP;
            [pt + 9] = 0;
            ireturn;
        endif;

        alias blockIndex R13;
        blockIndex = [lSeek] / 512;

        alias diskBlock R11;
        diskBlock = [INODE_TABLE + inodeIndex * 16 + 8 + blockIndex];

        alias offset R12;
        offset = [lSeek] % 512;

        multipush(R0, R1, R2, R3, R4, R5, R6, R7, R11, R12);
        R1 = 2;
        R2 = diskBlock;
        R3 = offset;
        R4 = wordAddress;
        call FILE_MANAGER; // buffer read
        multipop(R0, R1, R2, R3, R4, R5, R6, R7, R11, R12);

        [lSeek] = [lSeek] + 1;


        multipush(R0, R1, R2, R3, R4, R5, R6, R7, R11, R12);
        R1 = 5;
        R2 = inodeIndex;
        R3 = [SYSTEM_STATUS_TABLE + 1];
        call RESOURCE_MANAGER; // relase inode
        multipop(R0, R1, R2, R3, R4, R5, R6, R7, R11, R12);
            
        [returnadd] = 0;
        SP = userSP;
        [pt + 9] = 0;
        ireturn;
    endif;
endif;



